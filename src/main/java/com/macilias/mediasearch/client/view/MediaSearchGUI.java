package com.macilias.mediasearch.client.view;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;
import com.macilias.mediasearch.client.MediaSearchClient;
import com.macilias.mediasearch.client.controller.MediaSearchController;
import com.macilias.mediasearch.client.controller.PictureLoadController;
import com.macilias.mediasearch.client.controller.UserSettingsController;
import com.macilias.mediasearch.client.controller.facebook.FBMediaSearchController;
import com.macilias.mediasearch.client.controller.facebook.FBPictureLoadController;
import com.macilias.mediasearch.client.model.*;
import com.macilias.mediasearch.client.model.enumerations.*;
import com.macilias.mediasearch.client.model.facebook.FBConnection;
import com.macilias.mediasearch.client.model.interfaces.*;
import com.macilias.mediasearch.extensions.actions.StopSearchingAndFetchingAction;
import com.macilias.mediasearch.extensions.handler.*;
import com.macilias.mediasearch.extensions.layout.RoundedCornerBorder;
import com.macilias.mediasearch.extensions.listeners.PictureChangedListener;
import com.macilias.mediasearch.extensions.policies.TraversalPolicy;
import com.macilias.mediasearch.extensions.renderers.TextAreaCellRenderer;
import net.sf.nachocalendar.components.DateField;
import org.apache.commons.lang.StringUtils;
import org.apache.log4j.Logger;
import org.imgscalr.Scalr.Method;
import org.imgscalr.Scalr.Mode;

import javax.swing.*;
import javax.swing.RowSorter.SortKey;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import java.awt.*;
import java.awt.event.*;
import java.awt.image.BufferedImageOp;
import java.util.*;
import java.util.List;

import static org.imgscalr.Scalr.OP_ANTIALIAS;

public class MediaSearchGUI implements SearchCaller, SearchManager {

	private static final Logger LOG = Logger.getLogger(MediaSearchGUI.class);

	private static final String STOP_ACTION = "stopSearchingAndFetching";
	private static final String OPEN_OPTIONS = "openOptions";
	private static final String ALT_OPTIONS = "alternativeOptions";
	private static final String ID_PREFIX = "ID:";
	private static final String UID_PREFIX = "UID:";


	/**
	 * Method generated by IntelliJ IDEA GUI Designer
	 * >>> IMPORTANT!! <<<
	 * DO NOT edit this method OR call it in your code!
	 *
	 * @noinspection ALL
	 */
	private void $$$setupUI$$$() {
		createUIComponents();
		clientPanel.setLayout(new BorderLayout(0, 0));
		clientPanel.setMinimumSize(new Dimension(-1, -1));
		clientTabbedPane = new JTabbedPane();
		clientPanel.add(clientTabbedPane, BorderLayout.CENTER);
		mediaSearchPanel = new JPanel();
		mediaSearchPanel.setLayout(new GridLayoutManager(4, 5, new Insets(10, 10, 10, 10), -1, -1));
		clientTabbedPane.addTab("Mediensuche", mediaSearchPanel);
		resultScrollPane = new JScrollPane();
		resultScrollPane.setBackground(new Color(-3355444));
		resultScrollPane.setName("Ergebniss Tabelle");
		mediaSearchPanel.add(resultScrollPane, new GridConstraints(1, 2, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_WANT_GROW, null, new Dimension(454, 200), new Dimension(-1, 250), 0, false));
		resultTable = new JTable();
		resultTable.setAutoCreateRowSorter(true);
		resultTable.setName("Treffer");
		resultTable.setPreferredScrollableViewportSize(new Dimension(450, 80));
		resultTable.setUpdateSelectionOnSort(true);
		resultTable.putClientProperty("terminateEditOnFocusLost", Boolean.FALSE);
		resultScrollPane.setViewportView(resultTable);
		metaPanel = new JPanel();
		metaPanel.setLayout(new GridLayoutManager(2, 1, new Insets(0, 0, 0, 0), -1, -1));
		mediaSearchPanel.add(metaPanel, new GridConstraints(2, 2, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_VERTICAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
		metaPanel.setBorder(BorderFactory.createTitledBorder("Meta-Informationen"));
		metaScrollPane = new JScrollPane();
		metaPanel.add(metaScrollPane, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, new Dimension(300, 200), new Dimension(500, 600), null, 0, false));
		metaTable.setAutoResizeMode(4);
		metaTable.setPreferredScrollableViewportSize(new Dimension(-1, -1));
		metaTable.setShowHorizontalLines(false);
		metaTable.setShowVerticalLines(false);
		metaScrollPane.setViewportView(metaTable);
		final Spacer spacer1 = new Spacer();
		metaPanel.add(spacer1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
		previewPanel = new JPanel();
		previewPanel.setLayout(new BorderLayout(0, 0));
		mediaSearchPanel.add(previewPanel, new GridConstraints(2, 3, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, new Dimension(300, 200), new Dimension(500, 600), null, 0, true));
		previewPanel.setBorder(BorderFactory.createTitledBorder("Vorschau"));
		final Spacer spacer2 = new Spacer();
		mediaSearchPanel.add(spacer2, new GridConstraints(2, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, new Dimension(-1, 700), new Dimension(-1, 1024), 0, false));
		lefthandHeaderPanel = new JPanel();
		lefthandHeaderPanel.setLayout(new GridLayoutManager(4, 5, new Insets(0, 0, 0, 0), -1, -1));
		mediaSearchPanel.add(lefthandHeaderPanel, new GridConstraints(0, 1, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
		queryLabel = new JLabel();
		queryLabel.setText("Freitext");
		lefthandHeaderPanel.add(queryLabel, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(-1, 25), null, 0, false));
		queryTextField.setFocusAccelerator('F');
		queryTextField.setFocusTraversalPolicyProvider(false);
		queryTextField.setName("Freitext Suchfeld");
		queryTextField.setText("");
		lefthandHeaderPanel.add(queryTextField, new GridConstraints(1, 2, 1, 3, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
		mediaTypeLabel = new JLabel();
		mediaTypeLabel.setText("Medientyp");
		lefthandHeaderPanel.add(mediaTypeLabel, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
		mediaTypeComboBox = new JComboBox();
		mediaTypeComboBox.setName("Medientyp Auswahl");
		lefthandHeaderPanel.add(mediaTypeComboBox, new GridConstraints(2, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
		mediaStateActiveCheckBox = new JCheckBox();
		mediaStateActiveCheckBox.setFocusTraversalPolicyProvider(false);
		mediaStateActiveCheckBox.setName("nur aktive Medien");
		mediaStateActiveCheckBox.setText("nur aktive");
		lefthandHeaderPanel.add(mediaStateActiveCheckBox, new GridConstraints(2, 3, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
		mediaStateInactiveCheckBox = new JCheckBox();
		mediaStateInactiveCheckBox.setFocusTraversalPolicyProvider(false);
		mediaStateInactiveCheckBox.setName("nur inaktive Medien");
		mediaStateInactiveCheckBox.setText("nur inaktive");
		lefthandHeaderPanel.add(mediaStateInactiveCheckBox, new GridConstraints(2, 4, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
		searchButton = new JButton();
		searchButton.setFocusTraversalPolicyProvider(false);
		searchButton.setName("Suchen Knopf");
		searchButton.setText("Suchen");
		lefthandHeaderPanel.add(searchButton, new GridConstraints(3, 3, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
		final Spacer spacer3 = new Spacer();
		lefthandHeaderPanel.add(spacer3, new GridConstraints(1, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1, GridConstraints.SIZEPOLICY_WANT_GROW, new Dimension(-1, 35), new Dimension(-1, 35), null, 0, false));
		righthandHeadPanel = new JPanel();
		righthandHeadPanel.setLayout(new GridLayoutManager(4, 3, new Insets(0, 0, 0, 0), -1, -1));
		mediaSearchPanel.add(righthandHeadPanel, new GridConstraints(0, 3, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
		searchButtonPanel = new JPanel();
		searchButtonPanel.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
		righthandHeadPanel.add(searchButtonPanel, new GridConstraints(3, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
		favouriteSearchesSaveButton = new JButton();
		favouriteSearchesSaveButton.setName("Suche Speichern Knopf");
		favouriteSearchesSaveButton.setText("Suche Speichern");
		searchButtonPanel.add(favouriteSearchesSaveButton, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_EAST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
		favouriteSearchesSlot1 = new JPanel();
		favouriteSearchesSlot1.setLayout(new GridLayoutManager(1, 3, new Insets(0, 0, 0, 0), -1, -1));
		righthandHeadPanel.add(favouriteSearchesSlot1, new GridConstraints(1, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
		favouriteButton1 = new JButton();
		favouriteButton1.setEnabled(false);
		favouriteButton1.setName("Favoriten Suche 1");
		favouriteButton1.setText("Button");
		favouriteButton1.setVisible(false);
		favouriteSearchesSlot1.add(favouriteButton1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
		favouriteButton2 = new JButton();
		favouriteButton2.setEnabled(false);
		favouriteButton2.setName("Favoriten Suche 2");
		favouriteButton2.setText("Button");
		favouriteButton2.setVisible(false);
		favouriteSearchesSlot1.add(favouriteButton2, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
		favouriteButton3 = new JButton();
		favouriteButton3.setEnabled(false);
		favouriteButton3.setName("Favoriten Suche 3");
		favouriteButton3.setText("Button");
		favouriteButton3.setVisible(false);
		favouriteSearchesSlot1.add(favouriteButton3, new GridConstraints(0, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
		favouriteSearchesSlot2 = new JPanel();
		favouriteSearchesSlot2.setLayout(new GridLayoutManager(1, 3, new Insets(0, 0, 0, 0), -1, -1));
		righthandHeadPanel.add(favouriteSearchesSlot2, new GridConstraints(2, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
		favouriteButton4 = new JButton();
		favouriteButton4.setEnabled(false);
		favouriteButton4.setName("Favoriten Suche 4");
		favouriteButton4.setText("Button");
		favouriteButton4.setVisible(false);
		favouriteSearchesSlot2.add(favouriteButton4, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
		favouriteButton5 = new JButton();
		favouriteButton5.setEnabled(false);
		favouriteButton5.setName("Favoriten Suche 5");
		favouriteButton5.setText("Button");
		favouriteButton5.setVisible(false);
		favouriteSearchesSlot2.add(favouriteButton5, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
		favouriteButton6 = new JButton();
		favouriteButton6.setEnabled(false);
		favouriteButton6.setName("Favoriten Suche 6");
		favouriteButton6.setText("Button");
		favouriteButton6.setVisible(false);
		favouriteSearchesSlot2.add(favouriteButton6, new GridConstraints(0, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
		timeFromCheckBox = new JCheckBox();
		timeFromCheckBox.setFocusTraversalPolicyProvider(false);
		timeFromCheckBox.setName("Zeit von");
		timeFromCheckBox.setText("von");
		righthandHeadPanel.add(timeFromCheckBox, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
		timeToCheckBox = new JCheckBox();
		timeToCheckBox.setFocusTraversalPolicyProvider(false);
		timeToCheckBox.setName("Zeit bis");
		timeToCheckBox.setText("bis");
		righthandHeadPanel.add(timeToCheckBox, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
		intervalCheckBox = new JCheckBox();
		intervalCheckBox.setName("Zeit Interval");
		intervalCheckBox.setText("Interval");
		righthandHeadPanel.add(intervalCheckBox, new GridConstraints(3, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
		timeFromDateField = new DateField();
		timeFromDateField.setAntiAliased(true);
		timeFromDateField.setEnabled(false);
		timeFromDateField.setName("Zeit von Wahl");
		righthandHeadPanel.add(timeFromDateField, new GridConstraints(1, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(90, 22), null, 0, false));
		timeToDateField = new DateField();
		timeToDateField.setAntiAliased(true);
		timeToDateField.setEnabled(false);
		timeToDateField.setName("Zeit bis Wahl");
		righthandHeadPanel.add(timeToDateField, new GridConstraints(2, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(90, 22), null, 0, false));
		intervalComboBox = new JComboBox();
		intervalComboBox.setEnabled(false);
		intervalComboBox.setName("Zeit Interval Wahl");
		righthandHeadPanel.add(intervalComboBox, new GridConstraints(3, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, 1, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
		final Spacer spacer4 = new Spacer();
		righthandHeadPanel.add(spacer4, new GridConstraints(0, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
		footerPanel = new JPanel();
		footerPanel.setLayout(new GridLayoutManager(2, 3, new Insets(0, 0, 0, 0), -1, -1));
		mediaSearchPanel.add(footerPanel, new GridConstraints(3, 0, 1, 5, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
		footerControllPanel = new JPanel();
		footerControllPanel.setLayout(new BorderLayout(0, 0));
		footerPanel.add(footerControllPanel, new GridConstraints(0, 1, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
		handlerPanel = new JPanel();
		handlerPanel.setLayout(new FlowLayout(FlowLayout.CENTER, 5, 5));
		footerControllPanel.add(handlerPanel, BorderLayout.EAST);
		optionalHandlerButton = new JButton();
		optionalHandlerButton.setName("Sekundärer FS Handler");
		optionalHandlerButton.setText("Im Client Öffnen");
		handlerPanel.add(optionalHandlerButton);
		copyToClipboardButton = new JButton();
		copyToClipboardButton.setName("Ergebnisse Auswahl Knopf");
		copyToClipboardButton.setText("Ergebnis(e) auswählen");
		handlerPanel.add(copyToClipboardButton);
		handlerButton = new JButton();
		handlerButton.setName("Haupt FS Handler");
		handlerButton.setText("Rufe den Handler auf");
		handlerPanel.add(handlerButton);
		infoPanel = new JPanel();
		infoPanel.setLayout(new GridLayoutManager(1, 3, new Insets(0, 0, 0, 0), -1, -1));
		footerControllPanel.add(infoPanel, BorderLayout.CENTER);
		memoryProgressBar = new JProgressBar();
		infoPanel.add(memoryProgressBar, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
		searchResultCountLabel = new JLabel();
		searchResultCountLabel.setText("0");
		infoPanel.add(searchResultCountLabel, new GridConstraints(0, 2, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
		searchResultCountInfoLabel = new JLabel();
		searchResultCountInfoLabel.setText("Suchergebnisse:");
		infoPanel.add(searchResultCountInfoLabel, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
		progressBar = new JProgressBar();
		footerPanel.add(progressBar, new GridConstraints(1, 1, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
		pictureLoadProgressInfoLabel = new JLabel();
		pictureLoadProgressInfoLabel.setText("geladene Bilder:");
		footerPanel.add(pictureLoadProgressInfoLabel, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
		memoryProgressInfoLabel = new JLabel();
		memoryProgressInfoLabel.setText("Speicherverbrauch:");
		footerPanel.add(memoryProgressInfoLabel, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
		clipboardPanel = new JPanel();
		clipboardPanel.setLayout(new GridLayoutManager(2, 3, new Insets(0, 0, 0, 0), -1, -1));
		clientTabbedPane.addTab("Sammelmappe", clipboardPanel);
		clipboardScrollPane = new JScrollPane();
		clipboardScrollPane.setBackground(new Color(-3355444));
		clipboardPanel.add(clipboardScrollPane, new GridConstraints(0, 1, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, new Dimension(-1, 1200), null, 0, false));
		clipboardTable = new JTable();
		clipboardTable.setAutoCreateRowSorter(true);
		clipboardTable.setMinimumSize(new Dimension(30, 80));
		clipboardTable.setName("gesammelte Treffer");
		clipboardTable.setPreferredScrollableViewportSize(new Dimension(450, 600));
		clipboardTable.setUpdateSelectionOnSort(true);
		clipboardTable.putClientProperty("terminateEditOnFocusLost", Boolean.FALSE);
		clipboardScrollPane.setViewportView(clipboardTable);
		final Spacer spacer5 = new Spacer();
		clipboardPanel.add(spacer5, new GridConstraints(1, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1, GridConstraints.SIZEPOLICY_WANT_GROW, null, null, new Dimension(-1, 20), 0, false));
		clipboardFooterCotrollPanel = new JPanel();
		clipboardFooterCotrollPanel.setLayout(new BorderLayout(0, 0));
		clipboardPanel.add(clipboardFooterCotrollPanel, new GridConstraints(1, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
		clipboardHandlerPanel = new JPanel();
		clipboardHandlerPanel.setLayout(new BorderLayout(0, 0));
		clipboardFooterCotrollPanel.add(clipboardHandlerPanel, BorderLayout.EAST);
		clipboardHandlerButton = new JButton();
		clipboardHandlerButton.setName("Sammelmappe Haupt FS Handler");
		clipboardHandlerButton.setText("Rufe den Handler auf");
		clipboardHandlerPanel.add(clipboardHandlerButton, BorderLayout.CENTER);
		optionalClipboardHandlerButton = new JButton();
		optionalClipboardHandlerButton.setName("Sammelmappe Sekundärer FS Handler");
		optionalClipboardHandlerButton.setText("Im Client Öffnen");
		clipboardHandlerPanel.add(optionalClipboardHandlerButton, BorderLayout.WEST);
		final Spacer spacer6 = new Spacer();
		clipboardPanel.add(spacer6, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1, GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
	}


	/**
	 * @noinspection ALL
	 */
	public JComponent $$$getRootComponent$$$() {
		return clientPanel;
	}


	private final class OpenPreviewOnSpaceKeyAdapter extends KeyAdapter {
		private final JTable table;


		public OpenPreviewOnSpaceKeyAdapter(final JTable table) {
			this.table = table;
		}


		@Override
		public void keyPressed(final KeyEvent e) {
			if (e.getKeyCode() == KeyEvent.VK_SPACE && table.getModel() != null && table.getSelectedRow() > -1) {
				MediaSearchHit mediaSearchHit = ((AbstractMediaSearchHitTableModel) table.getModel()).getMediaSearchHits().get(table.convertRowIndexToModel(table.getSelectedRow()));
				showOriginalPictureInExternalFrame(mediaSearchHit);
			}
		}
	}

	private final class ClickOnEnterKeyAdapter extends KeyAdapter {
		private final JButton button;


		private ClickOnEnterKeyAdapter(final JButton button) {
			this.button = button;
		}


		@Override
		public void keyPressed(final KeyEvent e) {
			super.keyPressed(e);
			if (e.getKeyCode() == KeyEvent.VK_ENTER) {
				button.doClick();
				button.requestFocusInWindow();
			}
		}
	}

	private static final int MAX_FAVOURITE_SEARCHES = 6;
	private static final String NEW_FAVOURITE = "Neuer Favorit";
	public static final String DIALOG_INFO = "Hinweis";
	public static final String DIALOG_WARNING = "Warnung";
	private final Connection clientConnection = MediaSearchClient.getInstance().getClientConnection();

	// Additional Frames
	private PreviewFrame previewFrame;
	private OptionFrame optionFrame;

	// Controller
	private MediaSearchController mediaSearchController;
	private PictureLoadController pictureLoadController;

	// Handler
	private ResultHandler resultHandler;
	private ResultHandler resultMouseHandler;
	private ResultHandler optionalResultHandler;
	private ClipboardHandler clipboardHandler;
	private ClipboardHandler clipboardMouseHandler;
	private ClipboardHandler optionalClipboardHandler;

	private JTabbedPane clientTabbedPane;
	private JPanel clientPanel;
	private JPanel clipboardPanel;
	private JPanel mediaSearchPanel;
	private JLabel queryLabel;
	private JTextField queryTextField;
	private JCheckBox timeFromCheckBox;
	private JCheckBox timeToCheckBox;
	private JLabel mediaTypeLabel;
	private JComboBox mediaTypeComboBox;
	private JCheckBox mediaStateInactiveCheckBox;
	private JTable resultTable;
	private JButton searchButton;
	private JScrollPane resultScrollPane;
	private JButton handlerButton;
	private JProgressBar progressBar;
	private JPanel metaPanel;
	private JPanel previewPanel;
	private DateField timeFromDateField;
	private DateField timeToDateField;
	private JTable metaTable;
	private JPanel handlerPanel;
	private JPanel footerControllPanel;
	private JPanel lefthandHeaderPanel;
	private JPanel righthandHeadPanel;
	private JPanel footerPanel;
	private JScrollPane clipboardScrollPane;
	private JTable clipboardTable;
	private JPanel clipboardFooterCotrollPanel;
	private JPanel clipboardHandlerPanel;
	private JButton clipboardHandlerButton;
	private JButton copyToClipboardButton;
	private JPanel infoPanel;
	private JProgressBar memoryProgressBar;
	private JLabel searchResultCountInfoLabel;
	private JLabel searchResultCountLabel;
	private JLabel memoryProgressInfoLabel;
	private JLabel pictureLoadProgressInfoLabel;
	private JPanel favouriteSearchesSlot1;
	private JPanel favouriteSearchesSlot2;
	private JButton favouriteSearchesSaveButton;
	private JButton favouriteButton1;
	private JButton favouriteButton2;
	private JButton favouriteButton3;
	private JButton favouriteButton4;
	private JButton favouriteButton5;
	private JButton favouriteButton6;
	private JCheckBox intervalCheckBox;
	private JComboBox intervalComboBox;
	private JPanel searchButtonPanel;
	private JCheckBox mediaStateActiveCheckBox;
	private JScrollPane metaScrollPane;
	private JButton optionalHandlerButton;
	private JButton optionalClipboardHandlerButton;

	// modern thread safe singleton
	private static MediaSearchGUI instance = new MediaSearchGUI();
	private static JFrame frame = new JFrame("Media Search Client");

	// favourite Searches
	private List<MediaSearch> visibleFavouriteSearches;
	private List<MediaSearch> availableFavouriteSearches;
	private List<JButton> favouriteButtons;

	// performance options
	private Method scalingMethod = Method.AUTOMATIC;
	private Mode scalingMode = Mode.FIT_TO_HEIGHT;
	private final BufferedImageOp bufferedImageOps = OP_ANTIALIAS;
	private Resolution maxPictureResolution = Resolution.AUTO_DEF;
	private int maximalSpaceInMegaByte = 128;
	private boolean positionDialogPreferred = false;
	private boolean activeSearchPreferred = false;
	private boolean inactiveSearchPreferred = false;
	private boolean windowPosSavingPreferred = false;
	private boolean autoSavePreferred = false;
	private Point windowLocation = new Point(20, 20);
	private final Dimension windowSize = new Dimension(1014, 720);
	private Dimension customSize = null;

	// listener
	private final PictureChangedListener listener;


	// modern singleton
	public static MediaSearchGUI getInstance() {
		return instance;
	}


	// singleton
	public JFrame getFrame(final Point windowLocation, final Dimension windowSize, final Dimension customSize) {
		if (frame.getContentPane() != instance.clientPanel) {
			frame.setMinimumSize(windowSize);
			if (customSize != null) {
				frame.setPreferredSize(customSize);
			} else {
				frame.setPreferredSize(windowSize);
			}
			frame.setLocation(windowLocation);
			frame.setJMenuBar(instance.createFileMenu());
			frame.setContentPane(instance.clientPanel);
			frame.setDefaultCloseOperation(JFrame.HIDE_ON_CLOSE);
			frame.addWindowListener(new WindowAdapter() {
				@Override
				public void windowClosing(final WindowEvent e) {
					super.windowClosing(e);
					instance.stopSearching();
					instance.stopFetching();
					instance.autoSave();
					instance.closeChildren();
					MediaSearchClient.getInstance().closeConnection();
				}
			});
			frame.pack();
		}
		return frame;
	}


	private MediaSearchGUI() {
		listener = new PictureChangedListener(this);
		Map<String, Object> userSettings = loadUserSettings();
		userSettingsPreInitialization(userSettings);
		$$$setupUI$$$();
		fillComboBoxes();
		initializeController();
		initializeHandler();
		initializeDataTables();
		initializeFavouriteButtons();
		initializeSearchButton();
		initializeHandlerButtons();
		initializeLists();
		initializeFocusTracersalPolicy();
		manageActionListeners();
		manageChangeListeners();
		manageKeyListeners();
		manageKeyBindings();
		manageMouseListeners();
		userSettingsPostInitialization(userSettings);
	}


	private void initializeController() {

		LOG.warn("not implemented yet");

		if (clientConnection instanceof FBConnection) {
			mediaSearchController = new FBMediaSearchController();
			pictureLoadController = new FBPictureLoadController();
		}
	}


	private void initializeHandler() {

		resultHandler = new PopUpResultSelectionHandler();
		resultMouseHandler = new OpenResultSelectionHandler();
		clipboardHandler = new PopUpClipboardSelectionHandler();
		clipboardMouseHandler = new OpenClipboardSelectionHandler();
		optionalResultHandler = resultMouseHandler;
		optionalClipboardHandler = clipboardMouseHandler;

		LOG.warn("not implemented yet");

//		if (clientConnection instanceof FSConnection) {
//			FSConnection fsConnection = (FSConnection) clientConnection;
//			Map<String, Object> params = fsConnection.getParams();
//			resultHandler = new PopUpResultSelectionHandler();
//			clipboardHandler = new PopUpClipboardSelectionHandler();
//			resultMouseHandler = null;
//			clipboardMouseHandler = null;
//			optionalResultHandler = null;
//			optionalClipboardHandler = null;
//			if (params != null && params.containsKey(UIConstsants.PARAM_HANDLER)) {
//				String handler = (String) params.get(UIConstsants.PARAM_HANDLER);
//				if (handler.equals(UIConstsants.HANDLER_IMAGE_GALLERIES)) {
//					resultHandler = new ResultsToGalleryHandler();
//					clipboardHandler = new ClipboardToGalleryHandler();
//					resultMouseHandler = new OpenResultSelectionHandler();
//					clipboardMouseHandler = new OpenClipboardSelectionHandler();
//					optionalResultHandler = resultMouseHandler;
//					optionalClipboardHandler = clipboardMouseHandler;
//				} else if (handler.equals(UIConstsants.HANDLER_IMAGE_REFERENCE)) {
//					resultHandler = new ResultsToReferenceHandler();
//					clipboardHandler = new ClipboardToReferenceHandler();
//					resultMouseHandler = new OpenResultSelectionHandler();
//					clipboardMouseHandler = new OpenClipboardSelectionHandler();
//					optionalResultHandler = resultMouseHandler;
//					optionalClipboardHandler = clipboardMouseHandler;
//				} else if (handler.equals(UIConstsants.HANDLER_IMAGE_OPEN)) {
//					resultHandler = new OpenResultSelectionHandler();
//					clipboardHandler = new OpenClipboardSelectionHandler();
//					resultMouseHandler = resultHandler;
//					clipboardMouseHandler = clipboardHandler;
//				} else {
//					resultHandler = new PopUpResultSelectionHandler();
//					clipboardHandler = new PopUpClipboardSelectionHandler();
//					resultMouseHandler = resultHandler;
//					clipboardMouseHandler = clipboardHandler;
//				}
//			}
//		}
	}


	private void initializeLists() {
		availableFavouriteSearches = new ArrayList<MediaSearch>();
		visibleFavouriteSearches = new ArrayList<MediaSearch>();
	}


	private Map<String, Object> loadUserSettings() {
		return UserSettingsController.getInstance().getUserSettings();
	}


	public void userSettingsPreInitialization(final Map<String, Object> userSettings) {
		if (userSettings.containsKey(UserData.POSITION_DIALOG.getKey())) {
			positionDialogPreferred = (Boolean) userSettings.get(UserData.POSITION_DIALOG.getKey());
		}
		if (userSettings.containsKey(UserData.ACTIVE.getKey())) {
			activeSearchPreferred = (Boolean) userSettings.get(UserData.ACTIVE.getKey());
		}
		if (userSettings.containsKey(UserData.INACTIVE.getKey())) {
			inactiveSearchPreferred = (Boolean) userSettings.get(UserData.INACTIVE.getKey());
		}
		if (userSettings.containsKey(UserData.WINDOWLOC.getKey())) {
			windowLocation = (Point) userSettings.get(UserData.WINDOWLOC.getKey());
			windowPosSavingPreferred = true;
		}
		if (userSettings.containsKey(UserData.WINDOWSIZE.getKey())) {
			customSize = (Dimension) userSettings.get(UserData.WINDOWSIZE.getKey());
		}
		if (userSettings.containsKey(UserData.AUTOSAVE.getKey())) {
			autoSavePreferred = (Boolean) userSettings.get(UserData.AUTOSAVE.getKey());
		}
		if (userSettings.containsKey(UserData.MEMORY.getKey())) {
			maximalSpaceInMegaByte = (Integer) userSettings.get(UserData.MEMORY.getKey());
		}
		if (userSettings.containsKey(UserData.RESOLUTION.getKey())) {
			maxPictureResolution = applyDynamicResolutionValues((Resolution) userSettings.get(UserData.RESOLUTION.getKey()));
		}
		if (userSettings.containsKey(UserData.METHOD.getKey())) {
			scalingMethod = (Method) userSettings.get(UserData.METHOD.getKey());
		}
		if (userSettings.containsKey(UserData.MODE.getKey())) {
			scalingMode = (Mode) userSettings.get(UserData.MODE.getKey());
		}
	}


	@SuppressWarnings("unchecked")
	public void userSettingsPostInitialization(final Map<String, Object> userSettings) {
		if (userSettings.containsKey(UserData.SEARCHES_A.getKey())) {
			List<MediaSearch> availableSearches = (List<MediaSearch>) userSettings.get(UserData.SEARCHES_A.getKey());
			if (!availableSearches.isEmpty()) {
				availableFavouriteSearches = availableSearches;
			}
		}
		if (userSettings.containsKey(UserData.SEARCHES_V.getKey())) {
			List<MediaSearch> visibleSearches = (List<MediaSearch>) userSettings.get(UserData.SEARCHES_V.getKey());
			if (!visibleSearches.isEmpty()) {
				visibleFavouriteSearches = visibleSearches;
			}
		}
		if (userSettings.containsKey(UserData.COMPONENTS.getKey())) {
			List<String> excludedComponents = (List<String>) userSettings.get(UserData.COMPONENTS.getKey());
			if (!excludedComponents.isEmpty()) {
				setExcludedFromTraversalComponents(excludedComponents);
			}
		}
		if (userSettings.containsKey(UserData.FIRST.getKey())) {
			String firstTraversalComponentName = (String) userSettings.get(UserData.FIRST.getKey());
			setFirstTraversalComponent(firstTraversalComponentName);
		}
		if (userSettings.containsKey(UserData.LAST.getKey())) {
			String lastTraversalComponentName = (String) userSettings.get(UserData.LAST.getKey());
			setLastTraversalComponent(lastTraversalComponentName);
		}
		mediaStateActiveCheckBox.setSelected(activeSearchPreferred);
		mediaStateInactiveCheckBox.setSelected(inactiveSearchPreferred);
		repaintFavouriteSearches();
	}


	private void setExcludedFromTraversalComponents(final List<String> excludedComponents) {
		TraversalPolicy focusTraversalPolicy = (TraversalPolicy) mediaSearchPanel.getFocusTraversalPolicy();
		focusTraversalPolicy.setExcludedFromTraversalPolicyComponentNames(excludedComponents);
	}


	private void setLastTraversalComponent(final String lastTraversalComponentName) {
		if (StringUtils.isNotBlank(lastTraversalComponentName)) {
			TraversalPolicy focusTraversalPolicy = (TraversalPolicy) mediaSearchPanel.getFocusTraversalPolicy();
			focusTraversalPolicy.setLastComponent(lastTraversalComponentName);
		}
	}


	private void setFirstTraversalComponent(final String firstTraversalComponentName) {
		if (StringUtils.isNotBlank(firstTraversalComponentName)) {
			TraversalPolicy focusTraversalPolicy = (TraversalPolicy) mediaSearchPanel.getFocusTraversalPolicy();
			focusTraversalPolicy.setFirstComponent(firstTraversalComponentName);
		}
	}


	private Resolution applyDynamicResolutionValues(final Resolution resolution) {
		return OptionFrame.setMaxPictureResolution(resolution);
	}


	private void initializeSearchButton() {
		setQueryProgress(false);
	}


	private void initializeHandlerButtons() {
		if (positionDialogPreferred) {
			if (resultHandler instanceof ResultsToGalleryHandler) {
				handlerButton.setText(((ResultsToGalleryHandler) resultHandler).getAltTitle());
				handlerButton.setToolTipText(((ResultsToGalleryHandler) resultHandler).getAltDescription());
			} else {
				handlerButton.setText(resultHandler.getTitle());
				handlerButton.setToolTipText(resultHandler.getDescription());
			}
			if (clipboardHandler instanceof ClipboardToGalleryHandler) {
				clipboardHandlerButton.setText(((ClipboardToGalleryHandler) clipboardHandler).getAltTitle());
				clipboardHandlerButton.setToolTipText(((ClipboardToGalleryHandler) clipboardHandler).getAltDescription());
			} else {
				clipboardHandlerButton.setText(clipboardHandler.getTitle());
				clipboardHandlerButton.setToolTipText(clipboardHandler.getDescription());
			}
		} else {
			handlerButton.setText(resultHandler.getTitle());
			handlerButton.setToolTipText(resultHandler.getDescription());
			clipboardHandlerButton.setText(clipboardHandler.getTitle());
			clipboardHandlerButton.setToolTipText(clipboardHandler.getDescription());
		}

		clipboardHandlerButton.setText(clipboardHandler.getTitle());
		clipboardHandlerButton.setToolTipText(clipboardHandler.getDescription());

		if (optionalResultHandler != null) {
			optionalHandlerButton.setText(optionalResultHandler.getTitle());
			optionalHandlerButton.setToolTipText(optionalResultHandler.getDescription());
			optionalHandlerButton.setEnabled(true);
			optionalHandlerButton.setVisible(true);
		} else {
			optionalHandlerButton.setEnabled(false);
			optionalHandlerButton.setVisible(false);
		}

		if (optionalClipboardHandler != null) {
			optionalClipboardHandlerButton.setText(optionalClipboardHandler.getTitle());
			optionalClipboardHandlerButton.setToolTipText(optionalClipboardHandler.getDescription());
			optionalClipboardHandlerButton.setEnabled(true);
			optionalClipboardHandlerButton.setVisible(true);
		} else {
			optionalClipboardHandlerButton.setEnabled(false);
			optionalClipboardHandlerButton.setVisible(false);
		}
	}


	private void initializeFavouriteButtons() {
		favouriteSearchesSaveButton.setIcon(new ImageIcon(MediaSearchIcon.BOOKMARK_ICON.getImageData()));
		favouriteButtons = new ArrayList<JButton>(6);
		favouriteButtons.add(favouriteButton1);
		favouriteButtons.add(favouriteButton2);
		favouriteButtons.add(favouriteButton3);
		favouriteButtons.add(favouriteButton4);
		favouriteButtons.add(favouriteButton5);
		favouriteButtons.add(favouriteButton6);
	}


	private void manageMouseListeners() {
		if (resultMouseHandler != null) {
			resultTable.addMouseListener(new MouseAdapter() {
				@Override
				public void mouseClicked(final MouseEvent e) {
					super.mouseClicked(e);
					if (e.getClickCount() == 2) {
						resultMouseHandler.handleSelection(resultTable, null);
					}
				}
			});
		}
		if (clipboardMouseHandler != null) {
			clipboardTable.addMouseListener(new MouseAdapter() {
				@Override
				public void mouseClicked(final MouseEvent e) {
					super.mouseClicked(e);
					if (e.getClickCount() == 2) {
						clipboardMouseHandler.handleSelection(clipboardTable, null);
					}
				}
			});
		}
	}


	private void manageKeyBindings() {
		InputMap inputMap = mediaSearchPanel.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		ActionMap actionMap = mediaSearchPanel.getActionMap();

		KeyStroke optionFrameMac = KeyStroke.getKeyStroke(',', InputEvent.META_DOWN_MASK);
		KeyStroke escape = KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE, 0);
		KeyStroke alt = KeyStroke.getKeyStroke('p', InputEvent.ALT_DOWN_MASK);
		KeyStroke altGr = KeyStroke.getKeyStroke('p', InputEvent.ALT_GRAPH_DOWN_MASK);

		inputMap.put(optionFrameMac, OPEN_OPTIONS);
		inputMap.put(escape, STOP_ACTION);
		inputMap.put(alt, ALT_OPTIONS);
		inputMap.put(altGr, ALT_OPTIONS);

		actionMap.put(STOP_ACTION, new StopSearchingAndFetchingAction(this, clientPanel));
		actionMap.put(OPEN_OPTIONS, new AbstractAction() {

			@Override
			public void actionPerformed(final ActionEvent e) {
				openOptionFrame();
			}
		});
		actionMap.put(ALT_OPTIONS, new AbstractAction() {

			@Override
			public void actionPerformed(final ActionEvent e) {
				togglePositionDialogPreferred();
			}
		});
	}


	private void togglePositionDialogPreferred() {
		positionDialogPreferred = !positionDialogPreferred;
		alternateHandlerText();
	}


	private void alternateHandlerText() {
		if (positionDialogPreferred) {
			if (resultHandler instanceof ResultsToGalleryHandler) {
				handlerButton.setText(((ResultsToGalleryHandler) resultHandler).getAltTitle());
				handlerButton.setToolTipText(((ResultsToGalleryHandler) resultHandler).getAltDescription());
			}
			if (clipboardHandler instanceof ClipboardToGalleryHandler) {
				clipboardHandlerButton.setText(((ClipboardToGalleryHandler) clipboardHandler).getAltTitle());
				clipboardHandlerButton.setToolTipText(((ClipboardToGalleryHandler) clipboardHandler).getAltDescription());
			}
		} else {
			handlerButton.setText(resultHandler.getTitle());
			handlerButton.setToolTipText(resultHandler.getDescription());
			clipboardHandlerButton.setText(clipboardHandler.getTitle());
			clipboardHandlerButton.setToolTipText(clipboardHandler.getDescription());
		}
	}


	private void manageChangeListeners() {
		resultTable.getSelectionModel().addListSelectionListener(new ListSelectionListener() {
			@Override
			public void valueChanged(final ListSelectionEvent event) {
				if (resultTable.getSelectedRow() != -1) {
					int selectedModelIndex = resultTable.convertRowIndexToModel(resultTable.getSelectedRow());
					MediaSearchHit mediaSearchHit = ((ResultTableModel) resultTable.getModel()).getMediaSearchHits().get(selectedModelIndex);
					if (!mediaSearchHit.isFsPictureFetched() && !isFetchingInProgress()) {
						fetchPictures(resultTable.getSelectedRow(), false);
					}
					updatePreviewPanel(mediaSearchHit, selectedModelIndex);
					updateMetaTable(mediaSearchHit);
					copyToClipboardButton.setEnabled(true);
				} else {
					copyToClipboardButton.setEnabled(false);
				}
			}
		});
	}


	private void manageActionListeners() {
		timeFromCheckBox.addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(final ActionEvent e) {
				timeFromCheckBoxSelectionChanged();
			}
		});
		timeToCheckBox.addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(final ActionEvent e) {
				timeToCheckBoxSelectionChanged();
			}
		});
		intervalCheckBox.addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(final ActionEvent e) {
				intervalCheckBoxSelectionChanged();
			}
		});
		searchButton.addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(final ActionEvent e) {
				performSearch();
			}
		});
		copyToClipboardButton.addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(final ActionEvent e) {
				copyToClipboard();
			}
		});
		favouriteSearchesSaveButton.addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(final ActionEvent e) {
				addNewFavouriteSearch();
			}
		});
		for (int i = 0; i < favouriteButtons.size(); i++) {
			JButton favouriteButton = favouriteButtons.get(i);
			final int index = i;
			favouriteButton.addActionListener(new ActionListener() {
				@Override
				public void actionPerformed(final ActionEvent e) {
					performSearch(mergeSearchAndQuery(visibleFavouriteSearches.get(index)), true);
				}
			});
		}
		mediaStateActiveCheckBox.addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(final ActionEvent e) {
				if (mediaStateActiveCheckBox.isSelected()) {
					mediaStateInactiveCheckBox.setSelected(false);
				}
			}
		});
		mediaStateInactiveCheckBox.addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(final ActionEvent e) {
				if (mediaStateInactiveCheckBox.isSelected()) {
					mediaStateActiveCheckBox.setSelected(false);
				}
			}
		});
		handlerButton.addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(final ActionEvent e) {
				handleResults(resultHandler);
			}
		});
		optionalHandlerButton.addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(final ActionEvent e) {
				handleResults(optionalResultHandler);
			}
		});
		clipboardHandlerButton.addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(final ActionEvent e) {
				handleClipboard(clipboardHandler);
			}
		});
		optionalClipboardHandlerButton.addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(final ActionEvent e) {
				handleClipboard(optionalClipboardHandler);
			}
		});
	}


	private MediaSearch mergeSearchAndQuery(final MediaSearch mediaSearch) {
		String query = queryTextField.getText().trim();
		if (StringUtils.isBlank(query)) {
			return mediaSearch;
		} else if (StringUtils.isBlank(mediaSearch.getQuery())) {
			return mediaSearch.clone(query);
		} else if (!mediaSearch.getQuery().equals(query)) {
			int result = JOptionPane.showConfirmDialog(clientPanel, String.format("Suche '%s' mit Freitext '%s' ausführen?", mediaSearch.getName(), query), DIALOG_INFO, JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE, new ImageIcon(MediaSearchIcon.BOOKMARK_ICON.getImageData()));
			if (result == JOptionPane.YES_OPTION) {
				return mediaSearch.clone(query);
			}
		}
		return mediaSearch;
	}


	private void handleResults(final ResultHandler handler) {
		if (positionDialogPreferred && handler instanceof ResultsToGalleryHandler) {
			((ResultsToGalleryHandler) handler).handleSelection(resultTable, positionFromDialog());
		} else {
			handler.handleSelection(resultTable, clientPanel);
		}
		handleCommonPostOperations(handler);
	}


	private void handleClipboard(final ClipboardHandler handler) {
		if (positionDialogPreferred && handler instanceof ClipboardToGalleryHandler) {
			((ClipboardToGalleryHandler) handler).handleSelection(clipboardTable, positionFromDialog());
		} else {
			handler.handleSelection(clipboardTable, clientPanel);
		}
		if (handler.emptyClipboardAfterHandling()) {
			((ClipboardTableModel) clipboardTable.getModel()).clear();
		}
		handleCommonPostOperations(handler);
	}


	private void handleCommonPostOperations(final Handler handler) {
		if (handler.closeAfterHandling()) {
			autoSave();
			closeChildren();
			frame.setVisible(false);
		} else if (handler.toBackgroundAfterHandling()) {
			autoSave();
			frame.toBack();
		}
	}


	private int positionFromDialog() {
		String position = (String) JOptionPane.showInputDialog(clientPanel, "Bitte geben Sie die Position zum Einfügen ein:", DIALOG_INFO, JOptionPane.PLAIN_MESSAGE, new ImageIcon(MediaSearchIcon.SEARCH_ICON.getImageData()), null, null);
		return checkNumber(position);
	}


	private void copyToClipboard() {
		List<MediaSearchHit> mediaSearchHits = ((ResultTableModel) resultTable.getModel()).getMediaSearchHits();
		List<MediaSearchHit> selectedHits = new LinkedList<MediaSearchHit>();
		for (int selectedRow : resultTable.getSelectedRows()) {
			selectedHits.add(mediaSearchHits.get(resultTable.convertRowIndexToModel(selectedRow)));
		}
		((ClipboardTableModel) clipboardTable.getModel()).addAll(selectedHits);
		clientTabbedPane.setSelectedComponent(clipboardPanel);
	}


	private void intervalCheckBoxSelectionChanged() {
		if (intervalCheckBox.isSelected()) {
			intervalComboBox.setEnabled(true);
			timeFromCheckBox.setSelected(false);
			timeFromDateField.setEnabled(false);
			timeToCheckBox.setSelected(false);
			timeToDateField.setEnabled(false);
		} else {
			intervalComboBox.setEnabled(false);
		}
	}


	private void timeToCheckBoxSelectionChanged() {
		if (timeToCheckBox.isSelected()) {
			timeToDateField.setEnabled(true);
			intervalCheckBox.setSelected(false);
			intervalComboBox.setEnabled(false);
		} else {
			timeToDateField.setEnabled(false);
		}
	}


	private void timeFromCheckBoxSelectionChanged() {
		if (timeFromCheckBox.isSelected()) {
			timeFromDateField.setEnabled(true);
			intervalCheckBox.setSelected(false);
			intervalComboBox.setEnabled(false);
		} else {
			timeFromDateField.setEnabled(false);
		}
	}


	private void manageKeyListeners() {
		List<Component> performsSearchOnEnter = new LinkedList<Component>();
		performsSearchOnEnter.add(queryTextField);
		performsSearchOnEnter.add(mediaSearchPanel);
		for (Component component : performsSearchOnEnter) {
			component.addKeyListener(new ClickOnEnterKeyAdapter(searchButton));
		}
		copyToClipboardButton.addKeyListener(new ClickOnEnterKeyAdapter(copyToClipboardButton));
		resultTable.addKeyListener(new KeyAdapter() {
			@Override
			public void keyPressed(final KeyEvent e) {
				if (e.getKeyCode() == KeyEvent.VK_TAB) {
					TraversalPolicy focusTraversalPolicy = (TraversalPolicy) mediaSearchPanel.getFocusTraversalPolicy();
					if (!e.isShiftDown()) {
						Component componentAfter = focusTraversalPolicy.getComponentAfter(clientPanel, resultTable);
						componentAfter.requestFocusInWindow();
					} else {
						Component componentBefore = focusTraversalPolicy.getComponentBefore(clientPanel, resultTable);
						componentBefore.requestFocusInWindow();
					}
				}
			}
		});
		resultTable.addKeyListener(new OpenPreviewOnSpaceKeyAdapter(resultTable));
		clipboardTable.addKeyListener(new OpenPreviewOnSpaceKeyAdapter(clipboardTable));
		clipboardTable.addKeyListener(new KeyAdapter() {
			@Override
			public void keyPressed(final KeyEvent e) {
				if (e.getKeyCode() == KeyEvent.VK_BACK_SPACE || e.getKeyCode() == KeyEvent.VK_DELETE) {
					int[] selectedRows = clipboardTable.getSelectedRows();
					if (selectedRows.length > 0) {
						List<MediaSearchHit> mediaSearchHits = ((ClipboardTableModel) clipboardTable.getModel()).getMediaSearchHits();
						List<MediaSearchHit> hitsToRemove = new LinkedList<MediaSearchHit>();
						for (int selectedRow : selectedRows) {
							hitsToRemove.add(mediaSearchHits.get(clipboardTable.convertRowIndexToModel(selectedRow)));
						}
						((ClipboardTableModel) clipboardTable.getModel()).removeAll(hitsToRemove);
					}
				}
			}
		});
		for (final JButton favouriteButton : favouriteButtons) {
			favouriteButton.addKeyListener(new ClickOnEnterKeyAdapter(favouriteButton));
		}
	}


	private void addNewFavouriteSearch() {
		String name = (String) JOptionPane.showInputDialog(clientPanel, "Name der zu speichernden Suche:", NEW_FAVOURITE, JOptionPane.PLAIN_MESSAGE, new ImageIcon(MediaSearchIcon.BOOKMARK_ICON.getImageData()), null, queryTextField.getText());
		name = checkName(name);
		if (name != null) {
			MediaSearch search = new MediaSearch(name);
			getFieldValues(search);
			accommodateSearch(search);
		}
	}


	private String checkName(final String name) {
		if (name == null) {
			return null;
		}
		boolean nameOK = StringUtils.isNotBlank(name) && name.matches("^[a-zA-Z0-9 _\\-äüöÄÜÖß]*$");
		if (!nameOK) {
			String newName = (String) JOptionPane.showInputDialog(clientPanel, "Der Name sollte nur aus Buchstaben und Zahlen bestehen:", NEW_FAVOURITE, JOptionPane.WARNING_MESSAGE, null, null, name);
			if (newName == null) {
				return null;
			} else {
				return checkName(newName);
			}
		}
		return name;
	}


	private int checkNumber(final String position) {
		if (position == null) {
			return -1;
		}
		int number;
		try {
			number = Integer.parseInt(position);
		}
		catch (NumberFormatException e) {
			number = -1;
		}
		if (number == -1) {
			String newPosition = (String) JOptionPane.showInputDialog(clientPanel, "Die Position muss eine Zahl sein:", NEW_FAVOURITE, JOptionPane.WARNING_MESSAGE, null, null, position);
			if (newPosition == null) {
				return -1;
			} else {
				return checkNumber(newPosition);
			}
		} else {
			return number;
		}
	}


	private void accommodateSearch(final MediaSearch search) {
		if (visibleFavouriteSearches.size() < MAX_FAVOURITE_SEARCHES) {
			visibleFavouriteSearches.add(search);
			repaintFavouriteSearches();
		} else {
			int result = JOptionPane.showConfirmDialog(clientPanel, "Der Anzeigebreich für die Suchen ist voll. \nMöchten Sie dass die letzte Suche durch die neue ersetzt wird? \nSie können diese dann in den Einstellungen jederzeit wieder aktivieren.", DIALOG_INFO, JOptionPane.OK_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE, new ImageIcon(MediaSearchIcon.BOOKMARK_ICON.getImageData()));
			if (result == JOptionPane.OK_OPTION) {
				availableFavouriteSearches.add(visibleFavouriteSearches.remove(5));
				visibleFavouriteSearches.add(5, search);
				repaintFavouriteSearches();
			} else {
				availableFavouriteSearches.add(search);
			}
		}
	}


	private void repaintFavouriteSearches() {
		ImageIcon imageIcon = new ImageIcon(MediaSearchIcon.STAR_ICON.getImageData());
		for (int i = 0; i < visibleFavouriteSearches.size() && i < 6; i++) {
			MediaSearch mediaSearch = visibleFavouriteSearches.get(i);
			JButton favouriteButton = favouriteButtons.get(i);
			favouriteButton.setText(mediaSearch.getName());
			favouriteButton.setIcon(imageIcon);
			favouriteButton.setEnabled(true);
			if (StringUtils.isBlank(mediaSearch.getQuery())) {
				favouriteButton.setForeground(new Color(0, 0, 0));
			} else {
				favouriteButton.setForeground(new Color(139, 0, 139));
			}
			favouriteButton.setVisible(true);
		}
		for (int i = visibleFavouriteSearches.size(); i < 6; i++) {
			JButton favouriteButton = favouriteButtons.get(i);
			favouriteButton.setEnabled(false);
			favouriteButton.setVisible(false);
		}
	}


	private boolean checkEmptySearch(final MediaSearch mediaSearch) {
		if (noSearchInput(mediaSearch)) {
			int result = JOptionPane.showConfirmDialog(clientPanel, "Leere Suche ausführen? Das kann sehr lange dauern, aber mit ESC abgebrochen werden.", DIALOG_INFO, JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE, new ImageIcon(MediaSearchIcon.SEARCH_ICON.getImageData()));
			return result != JOptionPane.NO_OPTION;
		} else {
			return true;
		}
	}


	private boolean noSearchInput(final MediaSearch mediaSearch) {
		return StringUtils.isEmpty(mediaSearch.getId()) && StringUtils.isEmpty(mediaSearch.getUid()) && StringUtils.isEmpty(mediaSearch.getQuery()) && !mediaSearch.isTimeFromChecked() && !mediaSearch.isTimeToChecked() && !mediaSearch.isIntervalChecked() && !mediaSearch.isActiveOnly() && !mediaSearch.isInactiveOnly();
	}


	private void performSearch() {
		MediaSearch mediaSearch = new MediaSearch();
		getFieldValues(mediaSearch);
		performSearch(mediaSearch, false);
	}


	private void performSearch(final MediaSearch mediaSearch, final boolean repaintSearchValues) {
		try {
			stopSearching();
			stopFetching();
			resetPreviewMetaAndInfoPanel();
			initializeResultTable();
			selectionAllowed(false);
			if (repaintSearchValues) {
				setFieldValues(mediaSearch);
			}
			if (checkEmptySearch(mediaSearch)) {
				if (MediaSearchClient.getInstance().connectionEstablished()) {
					for (int from = progressBar.getValue(); from >= 0; from--) {
						progressBar.setValue(from);
					}
					for (int from = memoryProgressBar.getValue(); from >= 0; from--) {
						memoryProgressBar.setValue(from);
					}
					mediaSearchController.performSearch(this, this, clientConnection, mediaSearch);
					setQueryProgress(true);
				} else {
					JOptionPane.showMessageDialog(clientPanel, "Zur Zeit kann keine Suche durchgeführt werden, da keine Verbindung zum Server besteht.", DIALOG_INFO, JOptionPane.INFORMATION_MESSAGE, new ImageIcon(MediaSearchIcon.SEARCH_ICON.getImageData()));
				}
			}
		}
		catch (NoClassDefFoundError e) {
			LOG.error(String.format("Error while accessing the First Spirit connection resulting in a NoClossDefFound exception. The stack trace is irrelevant:"), e);
		}
	}


	private void sortResults() {
		DefaultRowSorter<?, ?> sorter = ((DefaultRowSorter) resultTable.getRowSorter());
		List<SortKey> list = new ArrayList<SortKey>();
		list.add(new SortKey(1, SortOrder.DESCENDING));
		sorter.setSortKeys(list);
		sorter.sort();
	}


	private void updateInfoPanel() {
		searchResultCountLabel.setText(String.valueOf(resultTable.getModel().getRowCount()));
		memoryProgressBar.setMinimum(0);
		memoryProgressBar.setMaximum(((ResultTableModel) resultTable.getModel()).getMaximalSpaceInByteAsInt());
	}


	private void resetPreviewMetaAndInfoPanel() {
		if (previewPanel.getComponents().length > 0) {
			previewPanel.removeAll();
			previewPanel.validate();
			previewPanel.updateUI();
		}
		((MetaDataTableModel) metaTable.getModel()).replaceMetaInfos(new LinkedList<MetaData>());
		searchResultCountLabel.setText("0");
	}


	@Override
	public void receiveSearchResultBunch(final List<MediaSearchHit> mediaSearchHits) {
		addResultsToResultTable(mediaSearchHits);
	}


	@Override
	public void receiveFinalSearchResultBunch(final List<MediaSearchHit> mediaSearchHits) {
		setQueryProgress(false);
		updateInfoPanel();
		addResultsToResultTable(mediaSearchHits);
		sortResults();
		selectionAllowed(true);
		doInitialFetchPictures();
	}


	private void setQueryProgress(final boolean running) {
		searchButton.setIcon(null);
		if (running) {
			searchButton.setIcon(new ImageIcon(MediaSearchIcon.LOADING_ICON.getImageData()));
		} else {
			searchButton.setIcon(new ImageIcon(MediaSearchIcon.SEARCH_ICON.getImageData()));
		}
	}


	@Override
	public int getMaximalSpaceInMegaByte() {
		return maximalSpaceInMegaByte;
	}


	@Override
	public void useMaximalSpaceInMegaByte(final int maximalSpaceInMegaByte) {
		this.maximalSpaceInMegaByte = maximalSpaceInMegaByte;
	}


	@Override
	public void usePictureResolution(final Resolution resolution) {
		maxPictureResolution = resolution;
	}


	@Override
	public void useScalingMethod(final Method method) {
		scalingMethod = method;
	}


	@Override
	public void useScalingMode(final Mode mode) {
		scalingMode = mode;
	}


	@Override
	public void setPositionDialogPreferred(boolean isPreferred) {
		positionDialogPreferred = isPreferred;
		alternateHandlerText();
	}


	@Override
	public void setActiveSearchPreferred(final boolean isPreferred) {
		activeSearchPreferred = isPreferred;
		mediaStateActiveCheckBox.setSelected(isPreferred);
	}


	@Override
	public void setInactiveSearchPreferred(final boolean isPreferred) {
		inactiveSearchPreferred = isPreferred;
		mediaStateInactiveCheckBox.setSelected(isPreferred);
	}


	@Override
	public void setWindowSavingPreferred(final boolean isPreferred) {
		windowPosSavingPreferred = isPreferred;
	}


	@Override
	public void setAutoSavePreferred(final boolean isPreferred) {
		autoSavePreferred = isPreferred;
	}


	@Override
	public void updateSearchResultCount(final String count) {
		searchResultCountLabel.setText(count);
	}


	@Override
	public void setVisibleFavouriteSearches(final List<MediaSearch> favouriteSearches) {
		visibleFavouriteSearches = favouriteSearches;
		repaintFavouriteSearches();
	}


	@Override
	public void setAvailableFavouriteSearches(final List<MediaSearch> favouriteSearches) {
		availableFavouriteSearches = favouriteSearches;
	}


	@Override
	public void stopSearching() {
		if (mediaSearchController.isSearchInProgress()) {
			mediaSearchController.stopSearching();
			setQueryProgress(false);
			selectionAllowed(true);
		}
	}


	@Override
	public void stopSearchingAndReactToTermination() {
		if (mediaSearchController.isSearchInProgress()) {
			mediaSearchController.stopSearching();
			setQueryProgress(false);
			updateInfoPanel();
			sortResults();
			selectionAllowed(true);
			doInitialFetchPictures();
		}
	}


	private void selectionAllowed(final boolean allowed) {
		resultTable.setEnabled(allowed);
	}


	public void stopFetching() {
		pictureLoadController.stopFetching();
	}


	public List<MediaSearch> getVisibleFavouriteSearches() {
		return visibleFavouriteSearches;
	}


	public List<MediaSearch> getAvailableFavouriteSearches() {
		return availableFavouriteSearches;
	}


	public boolean isQueryInProgress() {
		return mediaSearchController.isSearchInProgress();
	}


	public boolean isFetchingInProgress() {
		return pictureLoadController.isFetchingInProgress();
	}


	public void lockConnection() {
		pictureLoadController.setLocked(true);
	}


	public void useConnection(final Connection connection) {
//		MediaSearchClient.getInstance().reconnect(connection, optionFrame);

		LOG.warn("not implemented yet");

	}


	public void reactToReconnection() {
		Map<String, Object> userSettings = loadUserSettings();
		userSettingsPreInitialization(userSettings);
		userSettingsPostInitialization(userSettings);
		pictureLoadController.setLocked(false);
	}


	@Override
	public void reactToHandlerContextChanged() {
		initializeHandler();
		initializeHandlerButtons();
	}


	@Override
	public void reactToOutOfMemoryProblem(final boolean whileFetching) {
		stopSearching();
		stopFetching();
		if (whileFetching) {
			JOptionPane.showMessageDialog(clientPanel, "Das Programm muss beendet werden, da die Größe des verfügbaren Java Heap Spaces überschritten wurde. \nBitte wählen Sie nach dem Neustart eine kleinere Bildgröße im performance Tab aus \nund weisen Sie der MedienSuche weniger Speicher zu.", "Information", JOptionPane.INFORMATION_MESSAGE, new ImageIcon(MediaSearchIcon.SEARCH_ICON.getImageData()));
		} else {
			JOptionPane.showMessageDialog(clientPanel, "Das Programm muss beendet werden, da die Bilder für weitere Bearbeitung zu groß sind. \nBitte wählen Sie nach dem Neustart eine kleinere Bildgröße im performance Tab aus.", "Information", JOptionPane.INFORMATION_MESSAGE, new ImageIcon(MediaSearchIcon.SEARCH_ICON.getImageData()));
		}
		closeChildren();
		autoSave();
		optionFrame = null;
		previewFrame = null;
		frame.setVisible(false);
		frame.dispose();
		frame = null;
		instance = null;
		MediaSearchClient.getInstance().shutDown();
	}


	@Override
	public boolean isPositionDialogPreferred() {
		return positionDialogPreferred;
	}


	@Override
	public boolean isActiveSearchPreferred() {
		return activeSearchPreferred;
	}


	@Override
	public boolean isInactiveSearchPreferred() {
		return inactiveSearchPreferred;
	}


	@Override
	public boolean isWindowSavingPreferred() {
		return windowPosSavingPreferred;
	}


	@Override
	public boolean isAutoSavePreferred() {
		return autoSavePreferred;
	}


	@Override
	public Point getWindowLocation() {
		return frame.getLocationOnScreen();
	}


	@Override
	public Dimension getWindowSize() {
		return frame.getSize();
	}


	private void doInitialFetchPictures() {
		fetchPictures(0, true);
	}


	private void fetchPictures(final int actualPosition, final boolean initial) {
		// initial fetching is called via receiveFinalSearchResultBunch method - thus the thread is still alive
		// check only for QueryInProgress when the thread is not in a known Threat.State.RUNNABLE state
		if ((initial || !mediaSearchController.isSearchInProgress()) && mediaTypeComboBox.getSelectedItem() != MediaType.FILE) {
			synchronized (this) {
				pictureLoadController.loadImages(this, resultTable, maxPictureResolution.getDimension(), progressBar, memoryProgressBar, actualPosition);
			}
		}
	}


	private void initializeDataTables() {
		initializeResultTable();
		initTable(clipboardTable, new ClipboardTableModel(), true);
	}


	private void initializeResultTable() {
		initTable(resultTable, new ResultTableModel(new LinkedList<MediaSearchHit>(), maximalSpaceInMegaByte), false);
	}


	private void initTable(final JTable table, final AbstractMediaSearchHitTableModel tableModel, final boolean reorderingAllowed) {
		table.setModel(tableModel);
		table.setColumnModel(tableModel.getColumnModel());
		table.setSelectionMode(ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
		table.setAutoResizeMode(JTable.AUTO_RESIZE_SUBSEQUENT_COLUMNS);
		table.getTableHeader().setReorderingAllowed(reorderingAllowed);
		table.setAutoscrolls(reorderingAllowed);
		table.setDragEnabled(reorderingAllowed);
		table.setFillsViewportHeight(reorderingAllowed);
		table.setRowSelectionAllowed(true);
		if (reorderingAllowed) {
			table.setTransferHandler(new TableRowTransferHandler(table));
		}
		table.setDropMode(DropMode.INSERT_ROWS);
		table.getModel().addTableModelListener(listener);
	}


	private void addResultsToResultTable(final List<MediaSearchHit> mediaSearchHits) {
		if (!mediaSearchHits.isEmpty()) {
			try {
				((ResultTableModel) resultTable.getModel()).addAll(mediaSearchHits);
			}
			catch (IndexOutOfBoundsException e) {
				LOG.error(String.format("Error while inserting results to the table, did the model changed in the meantime?. Consult stack trace for exact reason:"), e);
			}
		}
	}


	private void fillComboBoxes() {
		for (MediaType mediaType : MediaType.values()) {
			mediaTypeComboBox.addItem(mediaType);
		}
		for (Interval interval : Interval.values()) {
			intervalComboBox.addItem(interval);
		}
	}


	// used each time the selection changes on the result Table -> selectedModelIndex >= 0
	// called from PictureChangeListener for updating the preview panel after fetching the picture -> selectedModelIndex < 0
	@Override
	public void updatePreviewPanel(final MediaSearchHit mediaSearchHit, final int selectedModelIndex) {
		if (previewPanel.getComponents().length > 0) {
			previewPanel.removeAll();
			previewPanel.revalidate();
		}
		ImageIcon imageIcon = mediaSearchHit.getScaledPicture(this, scalingMethod, scalingMode, previewPanel.getWidth(), previewPanel.getHeight(), bufferedImageOps);
		if (imageIcon != null) {
			JLabel label = new JLabel("", imageIcon, JLabel.CENTER);
			previewPanel.add(label, 0);
			previewPanel.revalidate();
		}
		if (selectedModelIndex >= 0) {
			listener.setSelectedIndex(selectedModelIndex);
			listener.setMediaSearchHit(mediaSearchHit);
		}
	}


	private void updateMetaTable(final MediaSearchHit mediaSearchHit) {
		List<MetaData> metaInformation = mediaSearchHit.getMetaInformation();
		if (metaInformation != null) {
			((MetaDataTableModel) metaTable.getModel()).replaceMetaInfos(metaInformation);
		}
	}


	private void showOriginalPictureInExternalFrame(final MediaSearchHit mediaSearchHit) {
		if (previewFrame == null) {
			previewFrame = new PreviewFrame();
		}
		previewFrame.showImage(mediaSearchHit);
	}


	private void openOptionFrame() {
		if (optionFrame == null) {
			optionFrame = new OptionFrame((TraversalPolicy) mediaSearchPanel.getFocusTraversalPolicy(), maxPictureResolution, scalingMethod, scalingMode);
		}
		optionFrame.showOptions();
	}


	private void initializeFocusTracersalPolicy() {
		List<Component> components = new ArrayList<Component>();
		components.add(queryTextField);
		components.add(mediaTypeComboBox);
		components.add(mediaStateActiveCheckBox);
		components.add(mediaStateInactiveCheckBox);
		components.add(timeFromCheckBox);
		components.add(timeFromDateField);
		components.add(timeToCheckBox);
		components.add(timeToDateField);
		components.add(intervalCheckBox);
		components.add(intervalComboBox);
		components.add(searchButton);
		components.addAll(favouriteButtons);
		components.add(favouriteSearchesSaveButton);
		components.add(resultTable);
		components.add(optionalHandlerButton);
		components.add(copyToClipboardButton);
		components.add(handlerButton);

		TraversalPolicy policy = new TraversalPolicy(components);
		policy.setFirstComponent(queryTextField);
		policy.setLastComponent(handlerButton);
		mediaSearchPanel.setFocusTraversalPolicyProvider(true);
		mediaSearchPanel.setFocusTraversalPolicy(policy);
		mediaSearchPanel.setFocusCycleRoot(true);
	}


	public static void main(final String[] args) {
		instance.open();
	}


	public void open() {
		instance.getFrame(windowLocation, windowSize, customSize).setVisible(true);
	}


	private JMenuBar createFileMenu() {
		JMenuBar ret = new JMenuBar();
		JMenu menu = new JMenu("Datei");
		menu.setMnemonic('D');
		JMenuItem mi;

		// options
		mi = new JMenuItem("Einstellungen", 'e');
		mi.addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(final ActionEvent e) {
				openOptionFrame();
			}
		});
		setCtrlAccelerator(mi, 'E');
		menu.add(mi);

		// save
		mi = new JMenuItem("Alles Speichern", 'a');
		mi.addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(final ActionEvent e) {
				saveAllSettings();
			}
		});
		setCtrlAccelerator(mi, 'S');
		menu.add(mi);
		ret.add(menu);
		return ret;
	}


	private void setCtrlAccelerator(final JMenuItem mi, final char acc) {
		KeyStroke ks = KeyStroke.getKeyStroke(acc, InputEvent.CTRL_MASK);
		mi.setAccelerator(ks);
	}


	private void autoSave() {
		if (autoSavePreferred) {
			saveAllSettings();
		}
	}


	private void saveAllSettings() {
		Map<String, Object> userSettings = new HashMap<String, Object>(UserData.values().length);
		userSettings.put(UserData.SEARCHES_A.getKey(), getAvailableFavouriteSearches());
		userSettings.put(UserData.SEARCHES_V.getKey(), getVisibleFavouriteSearches());
		if (optionFrame != null) {
			userSettings.putAll(optionFrame.getPerformanceOptions());
			userSettings.putAll(optionFrame.getProductivityOptions());
		} else if (autoSavePreferred) {
			userSettings.put(UserData.POSITION_DIALOG.getKey(), positionDialogPreferred);
			userSettings.put(UserData.WINDOWLOC.getKey(), getWindowLocation());
			userSettings.put(UserData.WINDOWSIZE.getKey(), getWindowSize());
		}
		UserSettingsController.getInstance().saveUserSettings(userSettings);
	}


	private void closeChildren() {
		if (optionFrame != null) {
			optionFrame.hideOptions();
		}
		if (previewFrame != null) {
			previewFrame.hidePreview();
		}
	}


	public void setFieldValues(final MediaSearch mediaSearch) {
		queryTextField.setText(mediaSearch.getQuery());
		mediaTypeComboBox.setSelectedItem(mediaSearch.getType());
		mediaStateActiveCheckBox.setSelected(mediaSearch.isActiveOnly());
		mediaStateInactiveCheckBox.setSelected(mediaSearch.isInactiveOnly());
		timeFromCheckBox.setSelected(mediaSearch.isTimeFromChecked());
		timeFromCheckBoxSelectionChanged();
		timeToCheckBox.setSelected(mediaSearch.isTimeToChecked());
		timeToCheckBoxSelectionChanged();
		timeFromDateField.setValue(mediaSearch.getTimeFrom());
		timeToDateField.setValue(mediaSearch.getTimeTo());
		intervalCheckBox.setSelected(mediaSearch.isIntervalChecked());
		intervalCheckBoxSelectionChanged();
		intervalComboBox.setSelectedItem(mediaSearch.getInterval());
	}


	public void getFieldValues(final MediaSearch mediaSearch) {
		String query = queryTextField.getText();
		if (query != null) {
			if (startsWithPrefix(query, ID_PREFIX)) {
				mediaSearch.setId(query.substring(ID_PREFIX.length()));
			} else if (startsWithPrefix(query, UID_PREFIX)) {
				mediaSearch.setUid(query.substring(UID_PREFIX.length()));
			} else {
				mediaSearch.setQuery(query);
			}
		}
		mediaSearch.setType((MediaType) mediaTypeComboBox.getSelectedItem());
		mediaSearch.setActiveOnly(mediaStateActiveCheckBox.isSelected());
		mediaSearch.setInactiveOnly(mediaStateInactiveCheckBox.isSelected());
		mediaSearch.setTimeFromChecked(timeFromCheckBox.isSelected());
		mediaSearch.setTimeToChecked(timeToCheckBox.isSelected());
		mediaSearch.setIntervalChecked(intervalCheckBox.isSelected());
		if (timeFromCheckBox.isSelected()) {
			mediaSearch.setTimeFrom((Date) timeFromDateField.getValue());
		}
		if (timeToCheckBox.isSelected()) {
			mediaSearch.setTimeTo((Date) timeToDateField.getValue());
		}
		if (intervalCheckBox.isSelected()) {
			mediaSearch.setInterval((Interval) intervalComboBox.getSelectedItem());
		}
	}


	private boolean startsWithPrefix(final String query, final String prefix) {
		return query.length() > prefix.length() && query.substring(0, prefix.length()).equalsIgnoreCase(prefix);
	}


	private void createUIComponents() {
		RoundedCornerBorder roundedBorder = new RoundedCornerBorder(clientConnection == null || clientConnection.isStandAlone());

		clientPanel = new JPanel();
		clientPanel.setLayout(new BorderLayout(0, 0));
		clientPanel.setMinimumSize(new Dimension(912, 650));
		if (customSize == null) {
			clientPanel.setPreferredSize(windowSize);
		} else {
			clientPanel.setMinimumSize(customSize);
			clientPanel.setPreferredSize(customSize);
		}

		queryTextField = new JTextField();

		queryTextField.setBorder(roundedBorder);

		metaTable = new MetaDataTable();
		metaTable.setModel(new MetaDataTableModel());
		metaTable.setEnabled(false);
		metaTable.setShowGrid(false);
		metaTable.setTableHeader(null);
		metaTable.getColumnModel().getColumn(0).setCellRenderer(new TextAreaCellRenderer());
		metaTable.getColumnModel().getColumn(1).setCellRenderer(new TextAreaCellRenderer());
		metaTable.setPreferredScrollableViewportSize(new Dimension(-1, -1));
		metaTable.setShowHorizontalLines(false);
		metaTable.setShowVerticalLines(false);

	}

}
